namespace MauiApp3.Page;

public partial class Sabbak : ContentPage
{
    private string _userName;
    private Query_SQL _query_sql;
    public Sabbak(string name)
	{
		InitializeComponent();
        _query_sql = new Query_SQL(name);
        Login_user.Text = name;
        _userName = name;
        Rule_card.Text = "ЦЕЛЬ ИГРЫ\r\nЦель игры состоит в том, чтобы набрать максимальное количество очков, равное числу, выпавшему на золотом кубике.\r\nПеред игрой:\r\nВыберите кого-нибудь, кто будет дилером. Этот игрок является дилером в первом раунде, игрок слева от них является дилером в следующем раунде и так далее. Дилер тоже играет.\r\n1. Дилер перемешивает колоду, затем раздает каждому игроку по 5 карт лицом вниз, начиная с игрока, сидящего слева от дилера. Игроки могут смотреть свои карты, но не должны показывать их другим игрокам.\r\n2. Крупье кладет оставшуюся колоду лицевой стороной вниз в центр стола. Это колода из которой можно будет брать карты.\r\nИГРА\r\n1. Дилер бросает кости. Кости подскажут всем игрокам, какое число и масть являются наиболее сильными в этой руке.\r\nА. Посчитайте свою руку. Каждый игрок выбирает из своей руки карты, сумма которых ближе всего к числу на золотом кубике, и кладет их лицевой стороной вниз. Эти карты - ВЫБОР игрока.\r\nБ. Помните, что зеленые карточки — это положительные числа, а красные - отрицательные. \r\nВ. Если есть несколько способов получить сумму, близкую к сумме на золотом кубике, разыграйте как можно больше карт масти на серебряном кубике и положите их лицевой стороной вниз.\r\n2. Когда придет ваша очередь, вы можете продолжить игру в раунде или сбросить карты, чтобы завершить участие в раунде. Игроки, сбросившие карты в это время, теряют все свои карты.\r\n3. СДВИГ САБАКК\r\nА. Все невыбранные карты - карты, все еще находящиеся в руке игрока, но не использованные в ВЫБОРЕ игрока - ПЕРЕМЕШИВАЮТСЯ.\r\nБ. Каждый игрок сбрасывает свои НЕВЫБРАННЫЕ карты (те, которые не были выложены лицом вниз на стол в течение первого раунда). Обратите внимание на количество сброшенных карт. \r\nВ. Каждый игрок берет новые карты из колоды в количестве, равном количеству карт, которые он только что сбросил.\r\nД. Когда придет ваша очередь, вы можете продолжить игру в раунде или отказаться от участия в раунде. Игроки, сбросившие карты в это время, теряют все свои карты.\r\n4. УЛУЧШЕНИЕ\r\nА. Используя только карты из своей новой руки (после ПЕРЕМЕЩЕНИЯ), игроки могут выбрать дополнительные карты, чтобы добавить их к ВЫБОРУ лицом вниз на столе.\r\nБ. Игроки могут добавлять карты только в свой ВЫБОР, они не могут удалять карты из ВЫБОРА.\r\nВ. Игроки могут не добавлять дополнительные карты в ВЫБОР.\r\nД. Игроки сбрасывают все неиспользованные карты, не являющиеся частью ВЫБОРА.\r\n5 РАСКРЫТИЕ\r\nА. После того, как все игроки получили возможность улучшить свои карты, все игроки, которые не сбросили карты, раскрывают карты в ВЫБОРЕ. ВЫИГРЫШНАЯ РУКА\r\nА. Выигрывает игрок, чья сумма ВЫБОРА ближе всего к числу на золотом кубике.\r\nБ. Если ничья, то побеждает игрок с наибольшим количеством карт масти на серебряном кубике. Помните, что 0 считается за все масти.\r\nВ. Если по-прежнему ничья, другие игроки (не выигравшие раунд) берут по одной карте из колоды для каждого игрока. Старшая карта выигрывает.\r\nСБРОС ДЛЯ СЛЕДУЮЩЕГО ХОДА\r\n-Все карты возвращаются в колоду и колода перемешивается.\r\n-Игроки получают новую руку из 5 карт. \r\n-Человек слева от последнего сдающего становится новым сдающим и бросающим кости.\r\n\r\nСыграйте достаточное количество раундов, чтобы каждый игрок мог быть дилером один раз.\r\n\r\n";
    }

    private void Nazad(object sender, EventArgs e)
    {
        Navigation.PopAsync();
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();
        await UpdateUserMoney(); // Обновление данных о деньгах
    }

    // Метод для получения и отображения денег пользователя
    private async Task UpdateUserMoney()
    {
        try
        {
            // Получение денег пользователя асинхронно
            int userMoney = await _query_sql.GetMoneyUser(_userName);
            User_Money.Text = userMoney.ToString();
        }
        catch (Exception ex)
        {
            // Логирование ошибок
            await DisplayAlert("Ошибка", $"Не удалось обновить деньги пользователя: {ex.Message}", "OK");
        }
    }

    private void QR_scan(object sender, EventArgs e)
    {
        string Login = Login_user.Text;

        Navigation.PushAsync(new Page.Scan(Login));
    }
}